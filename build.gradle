buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

ext.configFile = file "version.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

/*
 * Set the version number depending on the environment
 * if BUILD_NUMBER is in the environment
 *      {minecraft}-version.BUILD_NUMBER
 * Else use
 *      {minecraft}-version
 */
if (System.getenv("BUILD_NUMBER") != null) {
    println("Build number: " + System.getenv("BUILD_NUMBER"));
    if(System.getenv("BUILD_NUMBER").toInteger()<10) {
        version = "${config.minecraft_version}-${config.mod_version}_00" + System.getenv("BUILD_NUMBER");
    }
    else if(System.getenv("BUILD_NUMBER").toInteger()<100 && System.getenv("BUILD_NUMBER").toInteger()>=10) {
        version = "${config.minecraft_version}-${config.mod_version}_0" + System.getenv("BUILD_NUMBER");
    }
    else {
        version = "${config.minecraft_version}-${config.mod_version}_" + System.getenv("BUILD_NUMBER");
    }
} else {
    version = "${config.minecraft_version}-${config.mod_version}_000"
}
println(version);
group= "si.meansoft.meancore"
archivesBaseName = "MeanCore"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    assetDir = "run/assets"

    replaceIn "common/library/InfoMC.java"
    replace "@VERSION@", project.version
    replace "@FML@", "${config.fml_version}"
    replace "@FML-MAX@", "${config.fml_version}"
    replace "@FORGE@", "${config.forge_version}"
    replace "@FORGE-MAX@", "${config.forge_version}"
    if (project.hasProperty("meancore_signature")) {
        replace "@FINGERPRINT@", project.meancore_signature
    }
}

repositories {
    mavenLocal()
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

import net.minecraftforge.gradle.delayed.*
import net.minecraftforge.gradle.tasks.dev.ChangelogTask

task createChangelog(type: ChangelogTask) {
    println("Changelog task starting!");
    if (("${System.getenv().JOB_NAME}" != null) && project.hasProperty("jenkins_server") && project.hasProperty("jenkins_password")) {
        def jobName = "${System.getenv().JOB_NAME}"
        def buildNumber = "${System.getenv().BUILD_NUMBER}"

        println("Changelog: " + jobName + " " + buildNumber);

        setServerRoot(new DelayedString(project, project.jenkins_server))
        setJobName(new DelayedString(project, jobName.toString()))
        setAuthName(new DelayedString(project, project.jenkins_user))
        setAuthPassword(new DelayedString(project, project.jenkins_password))
        setTargetBuild({ buildNumber.toString() });
        setOutput(new DelayedFile(project, 'build/libs/' + project.archivesBaseName + '-' + project.version + '-changelog.txt'));
    }

    onlyIf {
        return (("${System.getenv().JOB_NAME}" != null) && project.hasProperty("jenkins_server") && project.hasProperty("jenkins_password"))
    }
}

tasks.build.dependsOn('createChangelog')
/*tasks.build.dependsOn('signJar')

if (!project.hasProperty("keystore_location")) // keystore stuff
    ext.keystore_location = "."
if (!project.hasProperty("keystore_password")) // keystore stuff
    ext.keystore_password = ""
if (!project.hasProperty("ee3_keystore_alias")) // keystore stuff
    ext.ee3_keystore_alias = ""

task signJar(dependsOn: ["reobf"]) {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property "meancore_keystore_alias", meancore_keystore_alias
    inputs.property "keystore_password", keystore_password
    outputs.dir devJar.destinationDir

    // only sign if the keystore exists
    onlyIf {
        return keystore_location != "." && keystore_password != ""
    }
    // the actual action.. sign the jar.
    doLast {
        jar.destinationDir.eachFile { file ->
            if (!file.getPath().endsWith(".jar"))
                return; // skip non-jars

            logger.lifecycle "signing $file"
            ant.signjar(
                    destDir: file.getParentFile(), // same place it came from
                    jar: file,
                    keystore: keystore_location,
                    alias: meancore_keystore_alias,
                    storepass: keystore_password
            )
        }
    }
}

artifacts {
    archives jar
}*/